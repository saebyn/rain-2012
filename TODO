
Intended next steps:

* Dialog class

* NPC Dialog

* Basic inventory support

* Detail combat TODO list


App Initialization
------------------

Check for canvas, et al, support via modernizr and report status

Check for optional features (local storage, sound) and tell the app about them


Items & Inventory
-----------------

* Items

  - Subclass of Entity

  - Can be converted into inventory item

  - Can be picked up by clicking on them.

  - Can have js code to handle events like:
  
    - load (when level is loaded)
    
    - view (when item comes into the player's view)

    - hide (when item leaves the player's view)

    - unload (when the level is unloaded)

* Player inventory

  - Inventory items can be held by Character in inventory

  - Inventory overlay in HTML&CSS

  - Shows items held by player

* Wieldable items.


Combat
------

...


Dev Tools
---------

World editor mode


Graphics
--------

* Animated sprites

  - Create a animated surface subclass that will automatically play default or specified animation, loaded by Loader


Sound
-----

* Music tracks spec'ed at game start

* Sounds spec'ed at game start

* Music tracks named per level


AI
--

Moving NPCs

  * Switch from one behavior to another based on world conditions/input

    - Example: game notifies characters when the player is close to them / the npc is on screen.

  * A waypoint behavior will follow a path set by a series of points, and optionally
    return to the original point and cycle through the path indefintely.

    - NPCs may go at a slower or faster pace during each leg of the path,
      and wait a set amount of time at each waypoint.

    - Initiallly use very specific paths, so no pathfinding code is needed.

  * NPCs use pathfinding code to move


Level files
-----------

* Level files can include other level files (see below for alt idea)

  - An entity with the same (internal key) name in both the including and
    included level file will take the properties of the included file
    first, then override them with the properties of the including file.

  - Entities included can have their internal name changed during the include.

  - Entities can all have an 'extends' property which copies and overrides the extended entity.

  - Entities that are 'extended' from aren't part of the scene.

* Compile level files from source files (YAML)

  - alternative to above including/extending ideas

  - has include and inheritance semantics built-in

  - outputs JSON files usable with current level loader

  - adds new local build step

* Level files and/or spritesheet files support key frame animations


Misc
----

* Use fabric to build & deploy

* Add In-game Menu (Esc key)

  - Add 'Save and quit' option

  - Add 'Save game' option

  - Add 'Quit' option [back to start screen]


* Game startup menu screen

  - Show options:
  
    - new game (and name game)
    
    - save game (if have local storage support)
    
    - load game (if any saved and have local storage support)


* Game save & load

  - Save current level & position

  - Save player inventory

  - Save npc positions & states

  - Load last saved game, trigger level load, set position

  - Load player inventory

  - Name the save

  - Choose a saved game to restore

* Laptop computer gives openable overlay (HTML&CSS)

* Smartphone gives sidebar overlay (HTML&CSS)
